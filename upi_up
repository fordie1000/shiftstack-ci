#!/usr/bin/env bash

set -Eeuo pipefail

declare -r \
	installer="${OPENSHIFT_INSTALLER:-openshift-install}" \
	os_cloud="${OS_CLOUD}" \
	ssh_host="$UPI_SSH_HOST" \
	http_host="$UPI_HTTP_HOST"

if ! [ -x "$installer" ]; then
	>&2 echo "Installer executable not found in '$installer'; exiting."
	exit 2
fi

declare -a playbooks=(common.yaml security-groups.yaml network.yaml bootstrap.yaml control-plane.yaml)

for playbook in "${playbooks[@]}"; do
	if ! [ -f $playbook ]; then
		>&2 echo "Playbook '${playbook}' not found; exiting."
		exit 2
	fi
done

if [ -f install-config.yaml ]; then
	>&2 echo 'install-config.yaml already exists; exiting.'
	exit 2
fi

if [ -f inventory.yaml ]; then
	>&2 echo 'inventory.yaml already exists; exiting.'
	exit 2
fi

declare -r \
	cluster_name="${USER:0:7}-upi-$(shuf -i 10-99 -n 1)"
	ip_class="$(shuf -i 1-250 -n 1)" \
	ssh_pubkey="$(ssh-add -L)" \
	pull_secret="$(pass show redhat/pull-secret)"
cat > install-config.yaml <<EOF
apiVersion: v1
baseDomain: jkfd.de
compute:
- architecture: amd64
  hyperthreading: Enabled
  name: worker
  platform: {}
  replicas: 0
controlPlane:
  architecture: amd64
  hyperthreading: Enabled
  name: master
  platform: {}
  replicas: 3
metadata:
  creationTimestamp: null
  name: '${cluster_name}'
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.${ip_class}.0.0/16
  networkType: OpenShiftSDN
  serviceNetwork:
  - 172.30.0.0/16
platform:
  openstack:
    apiVIP: 10.${ip_class}.0.5
    cloud: '${os_cloud}'
    computeFlavor: ocp.min.master
    externalDNS: null
    externalNetwork: provider_net_shared_3
    ingressVIP: 10.${ip_class}.0.7
    lbFloatingIP: 10.0.108.246
    octaviaSupport: "1"
    region: ""
    trunkSupport: "1"
publish: External
pullSecret: '${pull_secret}'
sshKey: '${ssh_pubkey}'
EOF


cat > inventory.yaml <<EOF
all:
  hosts:
    localhost:
      ansible_connection: local
      ansible_python_interpreter: "{{ansible_playbook_python}}"

      os_subnet_range: '10.${ip_class}.0.0/16'
      os_flavor_master: 'ocp.min.master'
      os_flavor_worker: 'ocp.min.worker'
      os_image_rhcos: 'rhcos-4.5'
      os_external_network: 'provider_net_shared_3'
      os_api_fip: '10.0.108.246'
      os_ingress_fip: '10.0.109.138'
      svc_subnet_range: '172.30.0.0/16'
      os_svc_network_range: '172.30.0.0/15'
      cluster_network_cidrs: '10.128.0.0/14'
      host_prefix: '23'
      os_networking_type: 'OpenshiftSDN'
      os_cp_nodes_number: 3
      os_compute_nodes_number: 3
EOF

$installer create manifests

exit 0

# Remove the MachineSet
rm -f openshift/99_openshift-cluster-api_master-machines-*.yaml openshift/99_openshift-cluster-api_worker-machineset-*.yaml

# Make control-plane nodes unschedulable
cat <<EOF | python -
import yaml
path = "manifests/cluster-scheduler-02-config.yml"
data = yaml.safe_load(open(path))
data["spec"]["mastersSchedulable"] = False
open(path, "w").write(yaml.dump(data, default_flow_style=False))
EOF

# Create the Ignition files
$installer create ignition-configs

declare -r INFRA_ID=$(jq -r .infraID metadata.json)
export INFRA_ID
echo "INFRA_ID: ${INFRA_ID}"

# Add hostname and OS_CACERT to the bootstrap ignition
cat <<EOF | python -
import base64
import json
import os

with open('bootstrap.ign', 'r') as f:
    ignition = json.load(f)

files = ignition['storage'].get('files', [])

infra_id = os.environ.get('INFRA_ID', 'openshift').encode()
hostname_b64 = base64.standard_b64encode(infra_id + b'-bootstrap\n').decode().strip()
files.append(
{
    'path': '/etc/hostname',
    'mode': 420,
    'contents': {
        'source': 'data:text/plain;charset=utf-8;base64,' + hostname_b64,
        'verification': {}
    },
    'filesystem': 'root',
})

ca_cert_path = os.environ.get('OS_CACERT', '')
if ca_cert_path:
    with open(ca_cert_path, 'r') as f:
        ca_cert = f.read().encode()
        ca_cert_b64 = base64.standard_b64encode(ca_cert).decode().strip()

    files.append(
    {
        'path': '/opt/openshift/tls/cloud-ca-cert.pem',
        'mode': 420,
        'contents': {
            'source': 'data:text/plain;charset=utf-8;base64,' + ca_cert_b64,
            'verification': {}
        },
        'filesystem': 'root',
    })

ignition['storage']['files'] = files;

with open('bootstrap.ign', 'w') as f:
    json.dump(ignition, f)
EOF

# Upload the bootstrap ignition
http_port="$(shuf -i 2000-65000 -n 1)"
echo -e 'HTTP/1.1 200 OK\n' |\
	cat - ./bootstrap.ign |\
	ssh "$ssh_host" nc -l -p $http_port &
echo "Remotely serving the Bootstrap ignition file on '${http_host}:${http_port}' with PID $!"

# Create the bootstrap ignition shim
cat > "${INFRA_ID}-bootstrap-ignition.json" <<EOF
{
  "ignition": {
    "config": {
      "append": [
        {
          "source": "${http_host}:${http_port}",
          "verification": {},
          "httpHeaders": []
        }
      ]
    },
    "security": {},
    "timeouts": {},
    "version": "2.4.0"
  },
  "networkd": {},
  "passwd": {},
  "storage": {},
  "systemd": {}
}
EOF

# Add hostname in master ignition
for index in $(seq 0 2); do
    MASTER_HOSTNAME="$INFRA_ID-master-$index\n"
    python -c "import base64, json, sys;
ignition = json.load(sys.stdin);
files = ignition['storage'].get('files', []);
files.append({'path': '/etc/hostname', 'mode': 420, 'contents': {'source': 'data:text/plain;charset=utf-8;base64,' + base64.standard_b64encode(b'$MASTER_HOSTNAME').decode().strip(), 'verification': {}}, 'filesystem': 'root'});
ignition['storage']['files'] = files;
json.dump(ignition, sys.stdout)" <master.ign >"$INFRA_ID-master-$index-ignition.json"
done

ansible-playbook -i inventory.yaml security-groups.yaml network.yaml bootstrap.yaml control-plane.yaml

$installer wait-for bootstrap-complete

ansible-playbook -i inventory.yaml down-bootstrap.yaml compute-nodes.yaml

echo 'Now approve the workers CSR'
echo 'https://github.com/openshift/installer/blob/master/docs/user/openstack/install_upi.md#approve-the-worker-csrs'
